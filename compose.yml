---
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      # Add build args for different environments
      args:
        - NODE_ENV=${NODE_ENV:-production}
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - MYSQL_HOST=mysql
      - MYSQL_USER=root
      - MYSQL_PASSWORD=root
      - MYSQL_DATABASE=leap_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=secretsecret
      - PORT=3000
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - leap-network-sample
    # Add healthcheck for the app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/events"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: leap_db
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      # Add initialization scripts if needed
      - ./src/migrations/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 15s
    networks:
      - leap-network-sample
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --appendfsync everysec --save 900 1 --save 300 10 --save 60 10000
    # command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis-data:/data
    networks:
      - leap-network-sample
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 10s
      retries: 5

volumes:
  mysql-data:
  redis-data:

networks:
  leap-network-sample:
    driver: bridge
